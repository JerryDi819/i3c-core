
// This file was autogenerated by PeakRDL-uvm
package i3c_reg_block_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - I3CCSR.I3CBase.HCI_VERSION
    class I3CCSR__I3CBase__HCI_VERSION extends uvm_reg;
        rand uvm_reg_field value;

        function new(string name = "I3CCSR__I3CBase__HCI_VERSION");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.value = new("value");
            this.value.configure(this, 32, 0, "RO", 0, 'h120, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__HCI_VERSION

    // Reg - I3CCSR.I3CBase.HC_CONTROL
    class I3CCSR__I3CBase__HC_CONTROL extends uvm_reg;
        rand uvm_reg_field iba_include;
        rand uvm_reg_field autocmd_data_rpt;
        rand uvm_reg_field byte_order;
        rand uvm_reg_field mode;
        rand uvm_reg_field i2c_devs;
        rand uvm_reg_field hot_join;
        rand uvm_reg_field halt_on_cmd_seq_timeout;
        rand uvm_reg_field abort;
        rand uvm_reg_field resume;
        rand uvm_reg_field bus_enable;

        function new(string name = "I3CCSR__I3CBase__HC_CONTROL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.iba_include = new("iba_include");
            this.iba_include.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.autocmd_data_rpt = new("autocmd_data_rpt");
            this.autocmd_data_rpt.configure(this, 1, 3, "RO", 0, 'h0, 1, 1, 0);
            this.byte_order = new("byte_order");
            this.byte_order.configure(this, 1, 4, "RO", 0, 'h0, 1, 1, 0);
            this.mode = new("mode");
            this.mode.configure(this, 1, 6, "RO", 0, 'h1, 1, 1, 0);
            this.i2c_devs = new("i2c_devs");
            this.i2c_devs.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
            this.hot_join = new("hot_join");
            this.hot_join.configure(this, 1, 8, "RW", 0, 'h0, 1, 1, 0);
            this.halt_on_cmd_seq_timeout = new("halt_on_cmd_seq_timeout");
            this.halt_on_cmd_seq_timeout.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.abort = new("abort");
            this.abort.configure(this, 1, 29, "RW", 0, 'h0, 1, 1, 0);
            this.resume = new("resume");
            this.resume.configure(this, 1, 30, "W1C", 1, 'h0, 1, 1, 0);
            this.bus_enable = new("bus_enable");
            this.bus_enable.configure(this, 1, 31, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__HC_CONTROL

    // Reg - I3CCSR.I3CBase.CONTROLLER_DEVICE_ADDR
    class I3CCSR__I3CBase__CONTROLLER_DEVICE_ADDR extends uvm_reg;
        rand uvm_reg_field dynamic_addr;
        rand uvm_reg_field dynamic_addr_valid;

        function new(string name = "I3CCSR__I3CBase__CONTROLLER_DEVICE_ADDR");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.dynamic_addr = new("dynamic_addr");
            this.dynamic_addr.configure(this, 7, 16, "RW", 1, 'h0, 1, 1, 0);
            this.dynamic_addr_valid = new("dynamic_addr_valid");
            this.dynamic_addr_valid.configure(this, 1, 31, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__CONTROLLER_DEVICE_ADDR

    // Reg - I3CCSR.I3CBase.HC_CAPABILITIES
    class I3CCSR__I3CBase__HC_CAPABILITIES extends uvm_reg;
        rand uvm_reg_field comb_cmd;
        rand uvm_reg_field auto_cmd;
        rand uvm_reg_field standby_cr;
        rand uvm_reg_field hdr_ddr;
        rand uvm_reg_field hdr_ts;
        rand uvm_reg_field cmd_ccc_defbyte;
        rand uvm_reg_field ibi_data_abort;
        rand uvm_reg_field ibi_credit_count;
        rand uvm_reg_field scheduled_commands;
        rand uvm_reg_field cmd_size;
        rand uvm_reg_field sc_cr_en;
        rand uvm_reg_field sc_ibi_en;
        rand uvm_reg_field sg_dc_en;

        function new(string name = "I3CCSR__I3CBase__HC_CAPABILITIES");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.comb_cmd = new("comb_cmd");
            this.comb_cmd.configure(this, 1, 2, "RO", 0, 'h0, 1, 1, 0);
            this.auto_cmd = new("auto_cmd");
            this.auto_cmd.configure(this, 1, 3, "RO", 0, 'h0, 1, 1, 0);
            this.standby_cr = new("standby_cr");
            this.standby_cr.configure(this, 1, 5, "RO", 0, 'h0, 1, 1, 0);
            this.hdr_ddr = new("hdr_ddr");
            this.hdr_ddr.configure(this, 1, 6, "RO", 0, 'h0, 1, 1, 0);
            this.hdr_ts = new("hdr_ts");
            this.hdr_ts.configure(this, 1, 7, "RO", 0, 'h0, 1, 1, 0);
            this.cmd_ccc_defbyte = new("cmd_ccc_defbyte");
            this.cmd_ccc_defbyte.configure(this, 1, 10, "RO", 0, 'h1, 1, 1, 0);
            this.ibi_data_abort = new("ibi_data_abort");
            this.ibi_data_abort.configure(this, 1, 11, "RO", 0, 'h0, 1, 1, 0);
            this.ibi_credit_count = new("ibi_credit_count");
            this.ibi_credit_count.configure(this, 1, 12, "RO", 0, 'h0, 1, 1, 0);
            this.scheduled_commands = new("scheduled_commands");
            this.scheduled_commands.configure(this, 1, 13, "RO", 0, 'h0, 1, 1, 0);
            this.cmd_size = new("cmd_size");
            this.cmd_size.configure(this, 2, 20, "RO", 0, 'h0, 1, 1, 0);
            this.sc_cr_en = new("sc_cr_en");
            this.sc_cr_en.configure(this, 1, 28, "RO", 0, 'h0, 1, 1, 0);
            this.sc_ibi_en = new("sc_ibi_en");
            this.sc_ibi_en.configure(this, 1, 29, "RO", 0, 'h0, 1, 1, 0);
            this.sg_dc_en = new("sg_dc_en");
            this.sg_dc_en.configure(this, 1, 30, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__HC_CAPABILITIES

    // Reg - I3CCSR.I3CBase.RESET_CONTROL
    class I3CCSR__I3CBase__RESET_CONTROL extends uvm_reg;
        rand uvm_reg_field soft_rst;
        rand uvm_reg_field cmd_queue;
        rand uvm_reg_field resp_queue;
        rand uvm_reg_field tx_fifo;
        rand uvm_reg_field rx_fifo;
        rand uvm_reg_field ibi_queue;

        function new(string name = "I3CCSR__I3CBase__RESET_CONTROL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.soft_rst = new("soft_rst");
            this.soft_rst.configure(this, 1, 0, "RW", 1, 'h0, 1, 1, 0);
            this.cmd_queue = new("cmd_queue");
            this.cmd_queue.configure(this, 1, 1, "RW", 1, 'h0, 1, 1, 0);
            this.resp_queue = new("resp_queue");
            this.resp_queue.configure(this, 1, 2, "RW", 1, 'h0, 1, 1, 0);
            this.tx_fifo = new("tx_fifo");
            this.tx_fifo.configure(this, 1, 3, "RW", 1, 'h0, 1, 1, 0);
            this.rx_fifo = new("rx_fifo");
            this.rx_fifo.configure(this, 1, 4, "RW", 1, 'h0, 1, 1, 0);
            this.ibi_queue = new("ibi_queue");
            this.ibi_queue.configure(this, 1, 5, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__RESET_CONTROL

    // Reg - I3CCSR.I3CBase.PRESENT_STATE
    class I3CCSR__I3CBase__PRESENT_STATE extends uvm_reg;
        rand uvm_reg_field ac_current_own;

        function new(string name = "I3CCSR__I3CBase__PRESENT_STATE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ac_current_own = new("ac_current_own");
            this.ac_current_own.configure(this, 1, 2, "RO", 1, 'h1, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__PRESENT_STATE

    // Reg - I3CCSR.I3CBase.INTR_STATUS
    class I3CCSR__I3CBase__INTR_STATUS extends uvm_reg;
        rand uvm_reg_field hc_internal_err;
        rand uvm_reg_field hc_seq_cancel_stat;
        rand uvm_reg_field hc_warn_cmd_seq_stall;
        rand uvm_reg_field hc_err_cmd_seq_timeout;
        rand uvm_reg_field sched_cmd_missed_tick;

        function new(string name = "I3CCSR__I3CBase__INTR_STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hc_internal_err = new("hc_internal_err");
            this.hc_internal_err.configure(this, 1, 10, "W1C", 1, 'h0, 1, 1, 0);
            this.hc_seq_cancel_stat = new("hc_seq_cancel_stat");
            this.hc_seq_cancel_stat.configure(this, 1, 11, "W1C", 1, 'h0, 1, 1, 0);
            this.hc_warn_cmd_seq_stall = new("hc_warn_cmd_seq_stall");
            this.hc_warn_cmd_seq_stall.configure(this, 1, 12, "W1C", 1, 'h0, 1, 1, 0);
            this.hc_err_cmd_seq_timeout = new("hc_err_cmd_seq_timeout");
            this.hc_err_cmd_seq_timeout.configure(this, 1, 13, "W1C", 1, 'h0, 1, 1, 0);
            this.sched_cmd_missed_tick = new("sched_cmd_missed_tick");
            this.sched_cmd_missed_tick.configure(this, 1, 14, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__INTR_STATUS

    // Reg - I3CCSR.I3CBase.INTR_STATUS_ENABLE
    class I3CCSR__I3CBase__INTR_STATUS_ENABLE extends uvm_reg;
        rand uvm_reg_field hc_internal_err_en;
        rand uvm_reg_field hc_seq_cancel_stat_en;
        rand uvm_reg_field hc_warn_cmd_seq_stall_en;
        rand uvm_reg_field hc_err_cmd_seq_timeout_en;
        rand uvm_reg_field sched_cmd_missed_tick_en;

        function new(string name = "I3CCSR__I3CBase__INTR_STATUS_ENABLE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hc_internal_err_en = new("hc_internal_err_en");
            this.hc_internal_err_en.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.hc_seq_cancel_stat_en = new("hc_seq_cancel_stat_en");
            this.hc_seq_cancel_stat_en.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.hc_warn_cmd_seq_stall_en = new("hc_warn_cmd_seq_stall_en");
            this.hc_warn_cmd_seq_stall_en.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.hc_err_cmd_seq_timeout_en = new("hc_err_cmd_seq_timeout_en");
            this.hc_err_cmd_seq_timeout_en.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.sched_cmd_missed_tick_en = new("sched_cmd_missed_tick_en");
            this.sched_cmd_missed_tick_en.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__INTR_STATUS_ENABLE

    // Reg - I3CCSR.I3CBase.INTR_SIGNAL_ENABLE
    class I3CCSR__I3CBase__INTR_SIGNAL_ENABLE extends uvm_reg;
        rand uvm_reg_field hc_internal_err_intr_en;
        rand uvm_reg_field hc_seq_cancel_stat_intr_en;
        rand uvm_reg_field hc_warn_cmd_seq_stall_intr_en;
        rand uvm_reg_field hc_err_cmd_seq_timeout_intr_en;
        rand uvm_reg_field sched_cmd_missed_tick_intr_en;

        function new(string name = "I3CCSR__I3CBase__INTR_SIGNAL_ENABLE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hc_internal_err_intr_en = new("hc_internal_err_intr_en");
            this.hc_internal_err_intr_en.configure(this, 1, 10, "RW", 0, 'h0, 1, 1, 0);
            this.hc_seq_cancel_stat_intr_en = new("hc_seq_cancel_stat_intr_en");
            this.hc_seq_cancel_stat_intr_en.configure(this, 1, 11, "RW", 0, 'h0, 1, 1, 0);
            this.hc_warn_cmd_seq_stall_intr_en = new("hc_warn_cmd_seq_stall_intr_en");
            this.hc_warn_cmd_seq_stall_intr_en.configure(this, 1, 12, "RW", 0, 'h0, 1, 1, 0);
            this.hc_err_cmd_seq_timeout_intr_en = new("hc_err_cmd_seq_timeout_intr_en");
            this.hc_err_cmd_seq_timeout_intr_en.configure(this, 1, 13, "RW", 0, 'h0, 1, 1, 0);
            this.sched_cmd_missed_tick_intr_en = new("sched_cmd_missed_tick_intr_en");
            this.sched_cmd_missed_tick_intr_en.configure(this, 1, 14, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__INTR_SIGNAL_ENABLE

    // Reg - I3CCSR.I3CBase.INTR_FORCE
    class I3CCSR__I3CBase__INTR_FORCE extends uvm_reg;
        rand uvm_reg_field force_hc_internal_err;
        rand uvm_reg_field force_hc_seq_cancel_stat;
        rand uvm_reg_field force_hc_warn_cmd_seq_stall;
        rand uvm_reg_field force_hc_err_cmd_seq_timeout;
        rand uvm_reg_field force_sched_cmd_missed_tick;

        function new(string name = "I3CCSR__I3CBase__INTR_FORCE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.force_hc_internal_err = new("force_hc_internal_err");
            this.force_hc_internal_err.configure(this, 1, 10, "WO", 0, 'h0, 1, 1, 0);
            this.force_hc_seq_cancel_stat = new("force_hc_seq_cancel_stat");
            this.force_hc_seq_cancel_stat.configure(this, 1, 11, "WO", 0, 'h0, 1, 1, 0);
            this.force_hc_warn_cmd_seq_stall = new("force_hc_warn_cmd_seq_stall");
            this.force_hc_warn_cmd_seq_stall.configure(this, 1, 12, "WO", 0, 'h0, 1, 1, 0);
            this.force_hc_err_cmd_seq_timeout = new("force_hc_err_cmd_seq_timeout");
            this.force_hc_err_cmd_seq_timeout.configure(this, 1, 13, "WO", 0, 'h0, 1, 1, 0);
            this.force_sched_cmd_missed_tick = new("force_sched_cmd_missed_tick");
            this.force_sched_cmd_missed_tick.configure(this, 1, 14, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__INTR_FORCE

    // Reg - I3CCSR.I3CBase.DAT_SECTION_OFFSET
    class I3CCSR__I3CBase__DAT_SECTION_OFFSET extends uvm_reg;
        rand uvm_reg_field table_offset;
        rand uvm_reg_field dat_entires;
        rand uvm_reg_field entry_size;

        function new(string name = "I3CCSR__I3CBase__DAT_SECTION_OFFSET");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.table_offset = new("table_offset");
            this.table_offset.configure(this, 12, 0, "RO", 0, 'h400, 1, 1, 0);
            this.dat_entires = new("dat_entires");
            this.dat_entires.configure(this, 7, 12, "RO", 0, 'h7f, 1, 1, 0);
            this.entry_size = new("entry_size");
            this.entry_size.configure(this, 4, 28, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__DAT_SECTION_OFFSET

    // Reg - I3CCSR.I3CBase.DCT_SECTION_OFFSET
    class I3CCSR__I3CBase__DCT_SECTION_OFFSET extends uvm_reg;
        rand uvm_reg_field table_offset;
        rand uvm_reg_field dct_size;
        rand uvm_reg_field table_idx;
        rand uvm_reg_field entry_size;

        function new(string name = "I3CCSR__I3CBase__DCT_SECTION_OFFSET");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.table_offset = new("table_offset");
            this.table_offset.configure(this, 12, 0, "RO", 0, 'h800, 1, 1, 0);
            this.dct_size = new("dct_size");
            this.dct_size.configure(this, 7, 12, "RO", 0, 'h7f, 1, 1, 0);
            this.table_idx = new("table_idx");
            this.table_idx.configure(this, 5, 19, "RW", 1, 'h0, 1, 1, 0);
            this.entry_size = new("entry_size");
            this.entry_size.configure(this, 4, 28, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__DCT_SECTION_OFFSET

    // Reg - I3CCSR.I3CBase.RING_HEADERS_SECTION_OFFSET
    class I3CCSR__I3CBase__RING_HEADERS_SECTION_OFFSET extends uvm_reg;
        rand uvm_reg_field ring_offset;

        function new(string name = "I3CCSR__I3CBase__RING_HEADERS_SECTION_OFFSET");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ring_offset = new("ring_offset");
            this.ring_offset.configure(this, 16, 0, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__RING_HEADERS_SECTION_OFFSET

    // Reg - I3CCSR.I3CBase.PIO_SECTION_OFFSET
    class I3CCSR__I3CBase__PIO_SECTION_OFFSET extends uvm_reg;
        rand uvm_reg_field pio_offset;

        function new(string name = "I3CCSR__I3CBase__PIO_SECTION_OFFSET");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.pio_offset = new("pio_offset");
            this.pio_offset.configure(this, 16, 0, "RO", 0, 'h100, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__PIO_SECTION_OFFSET

    // Reg - I3CCSR.I3CBase.EXT_CAPS_SECTION_OFFSET
    class I3CCSR__I3CBase__EXT_CAPS_SECTION_OFFSET extends uvm_reg;
        rand uvm_reg_field ext_offset;

        function new(string name = "I3CCSR__I3CBase__EXT_CAPS_SECTION_OFFSET");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ext_offset = new("ext_offset");
            this.ext_offset.configure(this, 16, 0, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__EXT_CAPS_SECTION_OFFSET

    // Reg - I3CCSR.I3CBase.INT_CTRL_CMDS_EN
    class I3CCSR__I3CBase__INT_CTRL_CMDS_EN extends uvm_reg;
        rand uvm_reg_field ICC_SUPPORT;
        rand uvm_reg_field MIPI_SUPPORT;

        function new(string name = "I3CCSR__I3CBase__INT_CTRL_CMDS_EN");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ICC_SUPPORT = new("ICC_SUPPORT");
            this.ICC_SUPPORT.configure(this, 1, 0, "RO", 0, 'h1, 1, 1, 0);
            this.MIPI_SUPPORT = new("MIPI_SUPPORT");
            this.MIPI_SUPPORT.configure(this, 15, 1, "RO", 0, 'h35, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__INT_CTRL_CMDS_EN

    // Reg - I3CCSR.I3CBase.IBI_NOTIFY_CTRL
    class I3CCSR__I3CBase__IBI_NOTIFY_CTRL extends uvm_reg;
        rand uvm_reg_field hj_rejected;
        rand uvm_reg_field crr_rejected;
        rand uvm_reg_field ibi_rejected;

        function new(string name = "I3CCSR__I3CBase__IBI_NOTIFY_CTRL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.hj_rejected = new("hj_rejected");
            this.hj_rejected.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.crr_rejected = new("crr_rejected");
            this.crr_rejected.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.ibi_rejected = new("ibi_rejected");
            this.ibi_rejected.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__IBI_NOTIFY_CTRL

    // Reg - I3CCSR.I3CBase.IBI_DATA_ABORT_CTRL
    class I3CCSR__I3CBase__IBI_DATA_ABORT_CTRL extends uvm_reg;
        rand uvm_reg_field match_id;
        rand uvm_reg_field max_data_length;
        rand uvm_reg_field ibi_match_statsus;
        rand uvm_reg_field data_abort_monitor;

        function new(string name = "I3CCSR__I3CBase__IBI_DATA_ABORT_CTRL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.match_id = new("match_id");
            this.match_id.configure(this, 8, 8, "RW", 0, 'h0, 1, 1, 0);
            this.max_data_length = new("max_data_length");
            this.max_data_length.configure(this, 2, 16, "RW", 0, 'h0, 1, 1, 0);
            this.ibi_match_statsus = new("ibi_match_statsus");
            this.ibi_match_statsus.configure(this, 3, 18, "RW", 0, 'h0, 1, 1, 0);
            this.data_abort_monitor = new("data_abort_monitor");
            this.data_abort_monitor.configure(this, 1, 31, "RW", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__IBI_DATA_ABORT_CTRL

    // Reg - I3CCSR.I3CBase.DEV_CTX_BASE_LO
    class I3CCSR__I3CBase__DEV_CTX_BASE_LO extends uvm_reg;
        rand uvm_reg_field base_lo;

        function new(string name = "I3CCSR__I3CBase__DEV_CTX_BASE_LO");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.base_lo = new("base_lo");
            this.base_lo.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__DEV_CTX_BASE_LO

    // Reg - I3CCSR.I3CBase.DEV_CTX_BASE_HI
    class I3CCSR__I3CBase__DEV_CTX_BASE_HI extends uvm_reg;
        rand uvm_reg_field base_hi;

        function new(string name = "I3CCSR__I3CBase__DEV_CTX_BASE_HI");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.base_hi = new("base_hi");
            this.base_hi.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__DEV_CTX_BASE_HI

    // Reg - I3CCSR.I3CBase.DEV_CTX_SG
    class I3CCSR__I3CBase__DEV_CTX_SG extends uvm_reg;
        rand uvm_reg_field list_size;
        rand uvm_reg_field blp;

        function new(string name = "I3CCSR__I3CBase__DEV_CTX_SG");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.list_size = new("list_size");
            this.list_size.configure(this, 16, 0, "RO", 0, 'h0, 1, 1, 0);
            this.blp = new("blp");
            this.blp.configure(this, 1, 31, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__I3CBase__DEV_CTX_SG

    // Regfile - I3CCSR.I3CBase
    class I3CCSR__I3CBase extends uvm_reg_block;
        rand I3CCSR__I3CBase__HCI_VERSION HCI_VERSION;
        rand I3CCSR__I3CBase__HC_CONTROL HC_CONTROL;
        rand I3CCSR__I3CBase__CONTROLLER_DEVICE_ADDR CONTROLLER_DEVICE_ADDR;
        rand I3CCSR__I3CBase__HC_CAPABILITIES HC_CAPABILITIES;
        rand I3CCSR__I3CBase__RESET_CONTROL RESET_CONTROL;
        rand I3CCSR__I3CBase__PRESENT_STATE PRESENT_STATE;
        rand I3CCSR__I3CBase__INTR_STATUS INTR_STATUS;
        rand I3CCSR__I3CBase__INTR_STATUS_ENABLE INTR_STATUS_ENABLE;
        rand I3CCSR__I3CBase__INTR_SIGNAL_ENABLE INTR_SIGNAL_ENABLE;
        rand I3CCSR__I3CBase__INTR_FORCE INTR_FORCE;
        rand I3CCSR__I3CBase__DAT_SECTION_OFFSET DAT_SECTION_OFFSET;
        rand I3CCSR__I3CBase__DCT_SECTION_OFFSET DCT_SECTION_OFFSET;
        rand I3CCSR__I3CBase__RING_HEADERS_SECTION_OFFSET RING_HEADERS_SECTION_OFFSET;
        rand I3CCSR__I3CBase__PIO_SECTION_OFFSET PIO_SECTION_OFFSET;
        rand I3CCSR__I3CBase__EXT_CAPS_SECTION_OFFSET EXT_CAPS_SECTION_OFFSET;
        rand I3CCSR__I3CBase__INT_CTRL_CMDS_EN INT_CTRL_CMDS_EN;
        rand I3CCSR__I3CBase__IBI_NOTIFY_CTRL IBI_NOTIFY_CTRL;
        rand I3CCSR__I3CBase__IBI_DATA_ABORT_CTRL IBI_DATA_ABORT_CTRL;
        rand I3CCSR__I3CBase__DEV_CTX_BASE_LO DEV_CTX_BASE_LO;
        rand I3CCSR__I3CBase__DEV_CTX_BASE_HI DEV_CTX_BASE_HI;
        rand I3CCSR__I3CBase__DEV_CTX_SG DEV_CTX_SG;

        function new(string name = "I3CCSR__I3CBase");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.HCI_VERSION = new("HCI_VERSION");
            this.HCI_VERSION.configure(this);

            this.HCI_VERSION.build();
            this.default_map.add_reg(this.HCI_VERSION, 'h0);
            this.HC_CONTROL = new("HC_CONTROL");
            this.HC_CONTROL.configure(this);

            this.HC_CONTROL.build();
            this.default_map.add_reg(this.HC_CONTROL, 'h4);
            this.CONTROLLER_DEVICE_ADDR = new("CONTROLLER_DEVICE_ADDR");
            this.CONTROLLER_DEVICE_ADDR.configure(this);

            this.CONTROLLER_DEVICE_ADDR.build();
            this.default_map.add_reg(this.CONTROLLER_DEVICE_ADDR, 'h8);
            this.HC_CAPABILITIES = new("HC_CAPABILITIES");
            this.HC_CAPABILITIES.configure(this);

            this.HC_CAPABILITIES.build();
            this.default_map.add_reg(this.HC_CAPABILITIES, 'hc);
            this.RESET_CONTROL = new("RESET_CONTROL");
            this.RESET_CONTROL.configure(this);

            this.RESET_CONTROL.build();
            this.default_map.add_reg(this.RESET_CONTROL, 'h10);
            this.PRESENT_STATE = new("PRESENT_STATE");
            this.PRESENT_STATE.configure(this);

            this.PRESENT_STATE.build();
            this.default_map.add_reg(this.PRESENT_STATE, 'h14);
            this.INTR_STATUS = new("INTR_STATUS");
            this.INTR_STATUS.configure(this);

            this.INTR_STATUS.build();
            this.default_map.add_reg(this.INTR_STATUS, 'h20);
            this.INTR_STATUS_ENABLE = new("INTR_STATUS_ENABLE");
            this.INTR_STATUS_ENABLE.configure(this);

            this.INTR_STATUS_ENABLE.build();
            this.default_map.add_reg(this.INTR_STATUS_ENABLE, 'h24);
            this.INTR_SIGNAL_ENABLE = new("INTR_SIGNAL_ENABLE");
            this.INTR_SIGNAL_ENABLE.configure(this);

            this.INTR_SIGNAL_ENABLE.build();
            this.default_map.add_reg(this.INTR_SIGNAL_ENABLE, 'h28);
            this.INTR_FORCE = new("INTR_FORCE");
            this.INTR_FORCE.configure(this);

            this.INTR_FORCE.build();
            this.default_map.add_reg(this.INTR_FORCE, 'h2c);
            this.DAT_SECTION_OFFSET = new("DAT_SECTION_OFFSET");
            this.DAT_SECTION_OFFSET.configure(this);

            this.DAT_SECTION_OFFSET.build();
            this.default_map.add_reg(this.DAT_SECTION_OFFSET, 'h30);
            this.DCT_SECTION_OFFSET = new("DCT_SECTION_OFFSET");
            this.DCT_SECTION_OFFSET.configure(this);

            this.DCT_SECTION_OFFSET.build();
            this.default_map.add_reg(this.DCT_SECTION_OFFSET, 'h34);
            this.RING_HEADERS_SECTION_OFFSET = new("RING_HEADERS_SECTION_OFFSET");
            this.RING_HEADERS_SECTION_OFFSET.configure(this);

            this.RING_HEADERS_SECTION_OFFSET.build();
            this.default_map.add_reg(this.RING_HEADERS_SECTION_OFFSET, 'h38);
            this.PIO_SECTION_OFFSET = new("PIO_SECTION_OFFSET");
            this.PIO_SECTION_OFFSET.configure(this);

            this.PIO_SECTION_OFFSET.build();
            this.default_map.add_reg(this.PIO_SECTION_OFFSET, 'h3c);
            this.EXT_CAPS_SECTION_OFFSET = new("EXT_CAPS_SECTION_OFFSET");
            this.EXT_CAPS_SECTION_OFFSET.configure(this);

            this.EXT_CAPS_SECTION_OFFSET.build();
            this.default_map.add_reg(this.EXT_CAPS_SECTION_OFFSET, 'h40);
            this.INT_CTRL_CMDS_EN = new("INT_CTRL_CMDS_EN");
            this.INT_CTRL_CMDS_EN.configure(this);

            this.INT_CTRL_CMDS_EN.build();
            this.default_map.add_reg(this.INT_CTRL_CMDS_EN, 'h4c);
            this.IBI_NOTIFY_CTRL = new("IBI_NOTIFY_CTRL");
            this.IBI_NOTIFY_CTRL.configure(this);

            this.IBI_NOTIFY_CTRL.build();
            this.default_map.add_reg(this.IBI_NOTIFY_CTRL, 'h58);
            this.IBI_DATA_ABORT_CTRL = new("IBI_DATA_ABORT_CTRL");
            this.IBI_DATA_ABORT_CTRL.configure(this);

            this.IBI_DATA_ABORT_CTRL.build();
            this.default_map.add_reg(this.IBI_DATA_ABORT_CTRL, 'h5c);
            this.DEV_CTX_BASE_LO = new("DEV_CTX_BASE_LO");
            this.DEV_CTX_BASE_LO.configure(this);

            this.DEV_CTX_BASE_LO.build();
            this.default_map.add_reg(this.DEV_CTX_BASE_LO, 'h60);
            this.DEV_CTX_BASE_HI = new("DEV_CTX_BASE_HI");
            this.DEV_CTX_BASE_HI.configure(this);

            this.DEV_CTX_BASE_HI.build();
            this.default_map.add_reg(this.DEV_CTX_BASE_HI, 'h64);
            this.DEV_CTX_SG = new("DEV_CTX_SG");
            this.DEV_CTX_SG.configure(this);

            this.DEV_CTX_SG.build();
            this.default_map.add_reg(this.DEV_CTX_SG, 'h68);
        endfunction : build
    endclass : I3CCSR__I3CBase

    // Reg - I3CCSR.PIOControl.COMMAND_PORT
    class I3CCSR__PIOControl__COMMAND_PORT extends uvm_reg;
        rand uvm_reg_field cmd;

        function new(string name = "I3CCSR__PIOControl__COMMAND_PORT");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cmd = new("cmd");
            this.cmd.configure(this, 1, 0, "WO", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__COMMAND_PORT

    // Reg - I3CCSR.PIOControl.RESPONSE_PORT
    class I3CCSR__PIOControl__RESPONSE_PORT extends uvm_reg;
        rand uvm_reg_field resp;

        function new(string name = "I3CCSR__PIOControl__RESPONSE_PORT");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.resp = new("resp");
            this.resp.configure(this, 1, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__RESPONSE_PORT

    // Reg - I3CCSR.PIOControl.XFER_DATA_PORT
    class I3CCSR__PIOControl__XFER_DATA_PORT extends uvm_reg;
        rand uvm_reg_field tx_data;
        rand uvm_reg_field rx_data;

        function new(string name = "I3CCSR__PIOControl__XFER_DATA_PORT");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tx_data = new("tx_data");
            this.tx_data.configure(this, 32, 0, "WO", 0, 'h0, 0, 1, 0);
            this.rx_data = new("rx_data");
            this.rx_data.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__XFER_DATA_PORT

    // Reg - I3CCSR.PIOControl.IBI_PORT
    class I3CCSR__PIOControl__IBI_PORT extends uvm_reg;
        rand uvm_reg_field ibi_port;

        function new(string name = "I3CCSR__PIOControl__IBI_PORT");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ibi_port = new("ibi_port");
            this.ibi_port.configure(this, 1, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__IBI_PORT

    // Reg - I3CCSR.PIOControl.QUEUE_THLD_CTRL
    class I3CCSR__PIOControl__QUEUE_THLD_CTRL extends uvm_reg;
        rand uvm_reg_field cmd_empty;
        rand uvm_reg_field resp_buf;
        rand uvm_reg_field ibi_data_size;
        rand uvm_reg_field ibi_status;

        function new(string name = "I3CCSR__PIOControl__QUEUE_THLD_CTRL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cmd_empty = new("cmd_empty");
            this.cmd_empty.configure(this, 8, 0, "RW", 0, 'h1, 1, 1, 0);
            this.resp_buf = new("resp_buf");
            this.resp_buf.configure(this, 8, 8, "RW", 0, 'h1, 1, 1, 0);
            this.ibi_data_size = new("ibi_data_size");
            this.ibi_data_size.configure(this, 8, 16, "RW", 0, 'h1, 1, 1, 0);
            this.ibi_status = new("ibi_status");
            this.ibi_status.configure(this, 8, 24, "RW", 0, 'h1, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__QUEUE_THLD_CTRL

    // Reg - I3CCSR.PIOControl.DATA_BUFFER_THLD_CTRL
    class I3CCSR__PIOControl__DATA_BUFFER_THLD_CTRL extends uvm_reg;
        rand uvm_reg_field tx_bux;
        rand uvm_reg_field rx_buf;
        rand uvm_reg_field tx_start_log;
        rand uvm_reg_field rx_start_log;

        function new(string name = "I3CCSR__PIOControl__DATA_BUFFER_THLD_CTRL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tx_bux = new("tx_bux");
            this.tx_bux.configure(this, 3, 0, "RW", 0, 'h1, 1, 1, 0);
            this.rx_buf = new("rx_buf");
            this.rx_buf.configure(this, 3, 8, "RW", 0, 'h1, 1, 1, 0);
            this.tx_start_log = new("tx_start_log");
            this.tx_start_log.configure(this, 3, 16, "RW", 0, 'h1, 1, 1, 0);
            this.rx_start_log = new("rx_start_log");
            this.rx_start_log.configure(this, 3, 24, "RW", 0, 'h1, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__DATA_BUFFER_THLD_CTRL

    // Reg - I3CCSR.PIOControl.QUEUE_SIZE
    class I3CCSR__PIOControl__QUEUE_SIZE extends uvm_reg;
        rand uvm_reg_field cr_queue_size;
        rand uvm_reg_field ibi_queue_size;
        rand uvm_reg_field rx_queue_size;
        rand uvm_reg_field tx_queue_size;

        function new(string name = "I3CCSR__PIOControl__QUEUE_SIZE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.cr_queue_size = new("cr_queue_size");
            this.cr_queue_size.configure(this, 8, 0, "RO", 0, 'hff, 1, 1, 0);
            this.ibi_queue_size = new("ibi_queue_size");
            this.ibi_queue_size.configure(this, 8, 8, "RO", 0, 'hff, 1, 1, 0);
            this.rx_queue_size = new("rx_queue_size");
            this.rx_queue_size.configure(this, 8, 16, "RO", 0, 'h7, 1, 1, 0);
            this.tx_queue_size = new("tx_queue_size");
            this.tx_queue_size.configure(this, 8, 24, "RO", 0, 'h7, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__QUEUE_SIZE

    // Reg - I3CCSR.PIOControl.ALT_QUEUE_SIZE
    class I3CCSR__PIOControl__ALT_QUEUE_SIZE extends uvm_reg;
        rand uvm_reg_field alt_resp_queue_size;
        rand uvm_reg_field alt_resp_queue_en;
        rand uvm_reg_field ext_ibi_queue_size;

        function new(string name = "I3CCSR__PIOControl__ALT_QUEUE_SIZE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.alt_resp_queue_size = new("alt_resp_queue_size");
            this.alt_resp_queue_size.configure(this, 8, 0, "RO", 0, 'h0, 1, 1, 0);
            this.alt_resp_queue_en = new("alt_resp_queue_en");
            this.alt_resp_queue_en.configure(this, 1, 24, "RO", 0, 'h0, 1, 1, 0);
            this.ext_ibi_queue_size = new("ext_ibi_queue_size");
            this.ext_ibi_queue_size.configure(this, 1, 28, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__ALT_QUEUE_SIZE

    // Reg - I3CCSR.PIOControl.PIO_INTR_STATUS
    class I3CCSR__PIOControl__PIO_INTR_STATUS extends uvm_reg;
        rand uvm_reg_field tx_threshold;
        rand uvm_reg_field rx_threshold;
        rand uvm_reg_field ibi_status;
        rand uvm_reg_field cmd_queue_ready;
        rand uvm_reg_field resp_ready;
        rand uvm_reg_field transfer_abort;
        rand uvm_reg_field transfer_err;

        function new(string name = "I3CCSR__PIOControl__PIO_INTR_STATUS");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tx_threshold = new("tx_threshold");
            this.tx_threshold.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.rx_threshold = new("rx_threshold");
            this.rx_threshold.configure(this, 1, 1, "RO", 1, 'h0, 1, 1, 0);
            this.ibi_status = new("ibi_status");
            this.ibi_status.configure(this, 1, 2, "RO", 1, 'h0, 1, 1, 0);
            this.cmd_queue_ready = new("cmd_queue_ready");
            this.cmd_queue_ready.configure(this, 1, 3, "RO", 1, 'h0, 1, 1, 0);
            this.resp_ready = new("resp_ready");
            this.resp_ready.configure(this, 1, 4, "RO", 1, 'h0, 1, 1, 0);
            this.transfer_abort = new("transfer_abort");
            this.transfer_abort.configure(this, 1, 5, "W1C", 1, 'h0, 1, 1, 0);
            this.transfer_err = new("transfer_err");
            this.transfer_err.configure(this, 1, 9, "W1C", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__PIO_INTR_STATUS

    // Reg - I3CCSR.PIOControl.PIO_INTR_STATUS_ENABLE
    class I3CCSR__PIOControl__PIO_INTR_STATUS_ENABLE extends uvm_reg;
        rand uvm_reg_field tx_threshold_en;
        rand uvm_reg_field rx_threshold_en;
        rand uvm_reg_field ibi_status_en;
        rand uvm_reg_field cmd_queue_ready_en;
        rand uvm_reg_field resp_ready_en;
        rand uvm_reg_field transfer_abort_en;
        rand uvm_reg_field transfer_err_en;

        function new(string name = "I3CCSR__PIOControl__PIO_INTR_STATUS_ENABLE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tx_threshold_en = new("tx_threshold_en");
            this.tx_threshold_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.rx_threshold_en = new("rx_threshold_en");
            this.rx_threshold_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.ibi_status_en = new("ibi_status_en");
            this.ibi_status_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.cmd_queue_ready_en = new("cmd_queue_ready_en");
            this.cmd_queue_ready_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.resp_ready_en = new("resp_ready_en");
            this.resp_ready_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.transfer_abort_en = new("transfer_abort_en");
            this.transfer_abort_en.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.transfer_err_en = new("transfer_err_en");
            this.transfer_err_en.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__PIO_INTR_STATUS_ENABLE

    // Reg - I3CCSR.PIOControl.PIO_INTR_SIGNAL_ENABLE
    class I3CCSR__PIOControl__PIO_INTR_SIGNAL_ENABLE extends uvm_reg;
        rand uvm_reg_field tx_threshold_intr_en;
        rand uvm_reg_field rx_threshold_intr_en;
        rand uvm_reg_field ibi_status_intr_en;
        rand uvm_reg_field cmd_queue_ready_intr_en;
        rand uvm_reg_field resp_ready_intr_en;
        rand uvm_reg_field transfer_abort_intr_en;
        rand uvm_reg_field transfer_err_intr_en;

        function new(string name = "I3CCSR__PIOControl__PIO_INTR_SIGNAL_ENABLE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.tx_threshold_intr_en = new("tx_threshold_intr_en");
            this.tx_threshold_intr_en.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.rx_threshold_intr_en = new("rx_threshold_intr_en");
            this.rx_threshold_intr_en.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.ibi_status_intr_en = new("ibi_status_intr_en");
            this.ibi_status_intr_en.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.cmd_queue_ready_intr_en = new("cmd_queue_ready_intr_en");
            this.cmd_queue_ready_intr_en.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.resp_ready_intr_en = new("resp_ready_intr_en");
            this.resp_ready_intr_en.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.transfer_abort_intr_en = new("transfer_abort_intr_en");
            this.transfer_abort_intr_en.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.transfer_err_intr_en = new("transfer_err_intr_en");
            this.transfer_err_intr_en.configure(this, 1, 9, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__PIO_INTR_SIGNAL_ENABLE

    // Reg - I3CCSR.PIOControl.PIO_INTR_FORCE
    class I3CCSR__PIOControl__PIO_INTR_FORCE extends uvm_reg;
        rand uvm_reg_field force_tx_threshold;
        rand uvm_reg_field force_rx_threshold;
        rand uvm_reg_field force_ibi_status;
        rand uvm_reg_field force_cmd_queue_ready;
        rand uvm_reg_field force_resp_ready;
        rand uvm_reg_field force_transfer_abort;
        rand uvm_reg_field force_transfer_err;

        function new(string name = "I3CCSR__PIOControl__PIO_INTR_FORCE");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.force_tx_threshold = new("force_tx_threshold");
            this.force_tx_threshold.configure(this, 1, 0, "WO", 0, 'h0, 1, 1, 0);
            this.force_rx_threshold = new("force_rx_threshold");
            this.force_rx_threshold.configure(this, 1, 1, "WO", 0, 'h0, 1, 1, 0);
            this.force_ibi_status = new("force_ibi_status");
            this.force_ibi_status.configure(this, 1, 2, "WO", 0, 'h0, 1, 1, 0);
            this.force_cmd_queue_ready = new("force_cmd_queue_ready");
            this.force_cmd_queue_ready.configure(this, 1, 3, "WO", 0, 'h0, 1, 1, 0);
            this.force_resp_ready = new("force_resp_ready");
            this.force_resp_ready.configure(this, 1, 4, "WO", 0, 'h0, 1, 1, 0);
            this.force_transfer_abort = new("force_transfer_abort");
            this.force_transfer_abort.configure(this, 1, 5, "WO", 0, 'h0, 1, 1, 0);
            this.force_transfer_err = new("force_transfer_err");
            this.force_transfer_err.configure(this, 1, 9, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__PIO_INTR_FORCE

    // Reg - I3CCSR.PIOControl.PIO_CONTROL
    class I3CCSR__PIOControl__PIO_CONTROL extends uvm_reg;
        rand uvm_reg_field enable_req;
        rand uvm_reg_field rs_req;
        rand uvm_reg_field abort_req;

        function new(string name = "I3CCSR__PIOControl__PIO_CONTROL");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.enable_req = new("enable_req");
            this.enable_req.configure(this, 1, 0, "RW", 0, 'h1, 1, 1, 0);
            this.rs_req = new("rs_req");
            this.rs_req.configure(this, 1, 1, "RW", 1, 'h0, 1, 1, 0);
            this.abort_req = new("abort_req");
            this.abort_req.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : I3CCSR__PIOControl__PIO_CONTROL

    // Regfile - I3CCSR.PIOControl
    class I3CCSR__PIOControl extends uvm_reg_block;
        rand I3CCSR__PIOControl__COMMAND_PORT COMMAND_PORT;
        rand I3CCSR__PIOControl__RESPONSE_PORT RESPONSE_PORT;
        rand I3CCSR__PIOControl__XFER_DATA_PORT XFER_DATA_PORT;
        rand I3CCSR__PIOControl__IBI_PORT IBI_PORT;
        rand I3CCSR__PIOControl__QUEUE_THLD_CTRL QUEUE_THLD_CTRL;
        rand I3CCSR__PIOControl__DATA_BUFFER_THLD_CTRL DATA_BUFFER_THLD_CTRL;
        rand I3CCSR__PIOControl__QUEUE_SIZE QUEUE_SIZE;
        rand I3CCSR__PIOControl__ALT_QUEUE_SIZE ALT_QUEUE_SIZE;
        rand I3CCSR__PIOControl__PIO_INTR_STATUS PIO_INTR_STATUS;
        rand I3CCSR__PIOControl__PIO_INTR_STATUS_ENABLE PIO_INTR_STATUS_ENABLE;
        rand I3CCSR__PIOControl__PIO_INTR_SIGNAL_ENABLE PIO_INTR_SIGNAL_ENABLE;
        rand I3CCSR__PIOControl__PIO_INTR_FORCE PIO_INTR_FORCE;
        rand I3CCSR__PIOControl__PIO_CONTROL PIO_CONTROL;

        function new(string name = "I3CCSR__PIOControl");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.COMMAND_PORT = new("COMMAND_PORT");
            this.COMMAND_PORT.configure(this);

            this.COMMAND_PORT.build();
            this.default_map.add_reg(this.COMMAND_PORT, 'h0);
            this.RESPONSE_PORT = new("RESPONSE_PORT");
            this.RESPONSE_PORT.configure(this);

            this.RESPONSE_PORT.build();
            this.default_map.add_reg(this.RESPONSE_PORT, 'h4);
            this.XFER_DATA_PORT = new("XFER_DATA_PORT");
            this.XFER_DATA_PORT.configure(this);

            this.XFER_DATA_PORT.build();
            this.default_map.add_reg(this.XFER_DATA_PORT, 'h8);
            this.IBI_PORT = new("IBI_PORT");
            this.IBI_PORT.configure(this);

            this.IBI_PORT.build();
            this.default_map.add_reg(this.IBI_PORT, 'hc);
            this.QUEUE_THLD_CTRL = new("QUEUE_THLD_CTRL");
            this.QUEUE_THLD_CTRL.configure(this);

            this.QUEUE_THLD_CTRL.build();
            this.default_map.add_reg(this.QUEUE_THLD_CTRL, 'h10);
            this.DATA_BUFFER_THLD_CTRL = new("DATA_BUFFER_THLD_CTRL");
            this.DATA_BUFFER_THLD_CTRL.configure(this);

            this.DATA_BUFFER_THLD_CTRL.build();
            this.default_map.add_reg(this.DATA_BUFFER_THLD_CTRL, 'h14);
            this.QUEUE_SIZE = new("QUEUE_SIZE");
            this.QUEUE_SIZE.configure(this);

            this.QUEUE_SIZE.build();
            this.default_map.add_reg(this.QUEUE_SIZE, 'h18);
            this.ALT_QUEUE_SIZE = new("ALT_QUEUE_SIZE");
            this.ALT_QUEUE_SIZE.configure(this);

            this.ALT_QUEUE_SIZE.build();
            this.default_map.add_reg(this.ALT_QUEUE_SIZE, 'h1c);
            this.PIO_INTR_STATUS = new("PIO_INTR_STATUS");
            this.PIO_INTR_STATUS.configure(this);

            this.PIO_INTR_STATUS.build();
            this.default_map.add_reg(this.PIO_INTR_STATUS, 'h20);
            this.PIO_INTR_STATUS_ENABLE = new("PIO_INTR_STATUS_ENABLE");
            this.PIO_INTR_STATUS_ENABLE.configure(this);

            this.PIO_INTR_STATUS_ENABLE.build();
            this.default_map.add_reg(this.PIO_INTR_STATUS_ENABLE, 'h24);
            this.PIO_INTR_SIGNAL_ENABLE = new("PIO_INTR_SIGNAL_ENABLE");
            this.PIO_INTR_SIGNAL_ENABLE.configure(this);

            this.PIO_INTR_SIGNAL_ENABLE.build();
            this.default_map.add_reg(this.PIO_INTR_SIGNAL_ENABLE, 'h28);
            this.PIO_INTR_FORCE = new("PIO_INTR_FORCE");
            this.PIO_INTR_FORCE.configure(this);

            this.PIO_INTR_FORCE.build();
            this.default_map.add_reg(this.PIO_INTR_FORCE, 'h2c);
            this.PIO_CONTROL = new("PIO_CONTROL");
            this.PIO_CONTROL.configure(this);

            this.PIO_CONTROL.build();
            this.default_map.add_reg(this.PIO_CONTROL, 'h30);
        endfunction : build
    endclass : I3CCSR__PIOControl

    // Reg - I3CCSR.DAT.DAT_MEMORY[]
    class I3CCSR__DAT__DAT_MEMORY extends uvm_vreg;
        rand uvm_vreg_field static_addr;
        rand uvm_vreg_field ibi_payload;
        rand uvm_vreg_field ibi_reject;
        rand uvm_vreg_field crr_reject;
        rand uvm_vreg_field ts;
        rand uvm_vreg_field dynamic_adr;
        rand uvm_vreg_field ring_id;
        rand uvm_vreg_field retry_cnt;
        rand uvm_vreg_field dev;
        rand uvm_vreg_field autocmd_mask;
        rand uvm_vreg_field autocmd_val;
        rand uvm_vreg_field autocmd_mode;
        rand uvm_vreg_field autocmd_hdr;

        function new(string name = "I3CCSR__DAT__DAT_MEMORY");
            super.new(name, 64);
        endfunction : new

        virtual function void build();
            this.static_addr = new("static_addr");
            this.static_addr.configure(this, 7, 0);
            this.ibi_payload = new("ibi_payload");
            this.ibi_payload.configure(this, 1, 12);
            this.ibi_reject = new("ibi_reject");
            this.ibi_reject.configure(this, 1, 13);
            this.crr_reject = new("crr_reject");
            this.crr_reject.configure(this, 1, 14);
            this.ts = new("ts");
            this.ts.configure(this, 1, 15);
            this.dynamic_adr = new("dynamic_adr");
            this.dynamic_adr.configure(this, 8, 16);
            this.ring_id = new("ring_id");
            this.ring_id.configure(this, 3, 26);
            this.retry_cnt = new("retry_cnt");
            this.retry_cnt.configure(this, 2, 29);
            this.dev = new("dev");
            this.dev.configure(this, 1, 31);
            this.autocmd_mask = new("autocmd_mask");
            this.autocmd_mask.configure(this, 8, 32);
            this.autocmd_val = new("autocmd_val");
            this.autocmd_val.configure(this, 8, 40);
            this.autocmd_mode = new("autocmd_mode");
            this.autocmd_mode.configure(this, 3, 48);
            this.autocmd_hdr = new("autocmd_hdr");
            this.autocmd_hdr.configure(this, 8, 51);
        endfunction : build
    endclass : I3CCSR__DAT__DAT_MEMORY

    // Mem - I3CCSR.DAT
    class I3CCSR__DAT extends uvm_reg_block;
        rand uvm_mem m_mem;
        rand I3CCSR__DAT__DAT_MEMORY DAT_MEMORY;

        function new(string name = "I3CCSR__DAT");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 8.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 128, 64, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
            this.DAT_MEMORY = new("DAT_MEMORY");
            this.DAT_MEMORY.configure(this, this.m_mem, 128);
            this.DAT_MEMORY.build();
        endfunction : build
    endclass : I3CCSR__DAT

    // Reg - I3CCSR.DCT.DCT_MEMORY[]
    class I3CCSR__DCT__DCT_MEMORY extends uvm_vreg;
        rand uvm_vreg_field pid_hi;
        rand uvm_vreg_field pid_lo;
        rand uvm_vreg_field dcr;
        rand uvm_vreg_field bcr;
        rand uvm_vreg_field dynamic_addr;

        function new(string name = "I3CCSR__DCT__DCT_MEMORY");
            super.new(name, 128);
        endfunction : new

        virtual function void build();
            this.pid_hi = new("pid_hi");
            this.pid_hi.configure(this, 32, 0);
            this.pid_lo = new("pid_lo");
            this.pid_lo.configure(this, 16, 32);
            this.dcr = new("dcr");
            this.dcr.configure(this, 8, 64);
            this.bcr = new("bcr");
            this.bcr.configure(this, 8, 72);
            this.dynamic_addr = new("dynamic_addr");
            this.dynamic_addr.configure(this, 8, 96);
        endfunction : build
    endclass : I3CCSR__DCT__DCT_MEMORY

    // Mem - I3CCSR.DCT
    class I3CCSR__DCT extends uvm_reg_block;
        rand uvm_mem m_mem;
        rand I3CCSR__DCT__DCT_MEMORY DCT_MEMORY;

        function new(string name = "I3CCSR__DCT");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 16.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 128, 128, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
            this.DCT_MEMORY = new("DCT_MEMORY");
            this.DCT_MEMORY.configure(this, this.m_mem, 128);
            this.DCT_MEMORY.build();
        endfunction : build
    endclass : I3CCSR__DCT

    // Addrmap - I3CCSR
    class I3CCSR extends uvm_reg_block;
        rand I3CCSR__I3CBase I3CBase;
        rand I3CCSR__PIOControl PIOControl;
        rand I3CCSR__DAT DAT;
        rand I3CCSR__DCT DCT;

        function new(string name = "I3CCSR");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 16, UVM_NO_ENDIAN);
            this.I3CBase = new("I3CBase");
            this.I3CBase.configure(this);
            this.I3CBase.build();
            this.default_map.add_submap(this.I3CBase.default_map, 'h0);
            this.PIOControl = new("PIOControl");
            this.PIOControl.configure(this);
            this.PIOControl.build();
            this.default_map.add_submap(this.PIOControl.default_map, 'h100);
            this.DAT = new("DAT");
            this.DAT.configure(this);
            this.DAT.build();
            this.default_map.add_submap(this.DAT.default_map, 'h400);
            this.DCT = new("DCT");
            this.DCT.configure(this);
            this.DCT.build();
            this.default_map.add_submap(this.DCT.default_map, 'h800);
        endfunction : build
    endclass : I3CCSR

endpackage: i3c_reg_block_pkg
